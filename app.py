import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

st.set_page_config(page_title="Roblox Accessory Price Optimizer", layout="wide")

st.title("üé© Roblox Accessory Price Optimizer")
st.write("–ó–∞–≥—Ä—É–∑–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV-—Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∂–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏.")

uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ CSV —Ñ–∞–π–ª—ã (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", type=["csv"], accept_multiple_files=True)

if uploaded_files:
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    dfs = []
    for file in uploaded_files:
        df = pd.read_csv(file)
        dfs.append(df)
    data = pd.concat(dfs, ignore_index=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    required_cols = {"Asset Name", "Price", "Revenue", "Date"}
    if not required_cols.issubset(data.columns):
        st.error(f"–í —Ç–∞–±–ª–∏—Ü–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
        st.stop()

    # –ß–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
    data = data[data["Revenue"] > 0]
    data = data.dropna(subset=["Asset Name", "Price", "Revenue"])

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã
    data["Price"] = data["Price"].astype(float)
    data["Revenue"] = data["Revenue"].astype(float)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
    grouped = data.groupby(["Asset Name", "Price"], as_index=False)["Revenue"].mean()

    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –î–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –≤–æ–∑—å–º–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –º–æ–¥–µ–ª—å
    def revenue_model(x, a, b, c):
        return a * x**2 + b * x + c

    results = []

    for name, df_item in grouped.groupby("Asset Name"):
        if len(df_item) < 3:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            optimal_price = df_item.loc[df_item["Revenue"].idxmax(), "Price"]
            max_rev = df_item["Revenue"].max()
        else:
            try:
                x = df_item["Price"].values
                y = df_item["Revenue"].values
                params, _ = curve_fit(revenue_model, x, y)
                a, b, c = params
                # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤–µ—Ä—à–∏–Ω—ã –ø–∞—Ä–∞–±–æ–ª—ã
                optimal_price = -b / (2 * a)
                max_rev = revenue_model(optimal_price, *params)
            except:
                optimal_price = df_item.loc[df_item["Revenue"].idxmax(), "Price"]
                max_rev = df_item["Revenue"].max()

        results.append({
            "Accessory": name,
            "Optimal Price": round(optimal_price, 2),
            "Max Revenue": round(max_rev, 2),
            "Min Tested Price": df_item["Price"].min(),
            "Max Tested Price": df_item["Price"].max()
        })

    result_df = pd.DataFrame(results).sort_values("Max Revenue", ascending=False)
    st.dataframe(result_df, use_container_width=True)

    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º")

    selected = st.selectbox("–í—ã–±–µ—Ä–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞:", result_df["Accessory"])
    df_plot = grouped[grouped["Asset Name"] == selected]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots()
    ax.scatter(df_plot["Price"], df_plot["Revenue"], label="–î–∞–Ω–Ω—ã–µ", color="blue")

    if len(df_plot) >= 3:
        x = np.linspace(df_plot["Price"].min(), df_plot["Price"].max(), 100)
        try:
            params, _ = curve_fit(revenue_model, df_plot["Price"], df_plot["Revenue"])
            y = revenue_model(x, *params)
            ax.plot(x, y, color="red", label="–ú–æ–¥–µ–ª—å (–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è)")
        except:
            pass

    opt_price = result_df[result_df["Accessory"] == selected]["Optimal Price"].values[0]
    ax.axvline(opt_price, color="green", linestyle="--", label=f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {opt_price}")

    ax.set_xlabel("–¶–µ–Ω–∞")
    ax.set_ylabel("–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π Revenue")
    ax.legend()
    st.pyplot(fig)

    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤—ã—á–∏—Å–ª–µ–Ω—ã.")

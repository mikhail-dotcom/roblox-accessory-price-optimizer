import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from datetime import datetime

st.set_page_config(page_title="Roblox Accessory Price Optimizer", layout="wide")
st.title("üé© Roblox Accessory Price Optimizer")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∂–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏.")

uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã:", type=["csv"], accept_multiple_files=True)

if uploaded_files:
    dfs = []
    for file in uploaded_files:
        df = pd.read_csv(file)
        dfs.append(df)
    data = pd.concat(dfs, ignore_index=True)

    data.columns = data.columns.str.strip()
    required_cols = {"Asset Name", "Asset Type", "Price", "Revenue", "Date and Time"}
    if not required_cols.issubset(data.columns):
        st.error(f"–¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}. –ù–∞–π–¥–µ–Ω–æ: {', '.join(data.columns)}")
        st.stop()

    data["Revenue"] = pd.to_numeric(data["Revenue"], errors="coerce")
    data["Price"] = pd.to_numeric(data["Price"], errors="coerce")
    data = data.dropna(subset=["Asset Name","Asset Type","Price","Revenue","Date and Time"])
    data = data[data["Revenue"]>0]  # —É–¥–∞–ª—è–µ–º –±–∞–≥–æ–≤—ã–µ –Ω—É–ª–∏

    data["Date and Time"] = pd.to_datetime(data["Date and Time"], errors="coerce")
    today = datetime.now().date()
    data = data[data["Date and Time"].dt.date < today]
    data['Date'] = data['Date and Time'].dt.date

    # 1) –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ Revenue –∑–∞ –¥–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–Ω—ã
    daily_price = data.groupby(['Asset Name','Asset Type','Price','Date'], as_index=False)['Revenue'].sum()

    # 2) –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–Ω—ã –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–≤–Ω–æ–µ Revenue
    price_agg = daily_price.groupby(['Asset Name','Asset Type','Price'], as_index=False)['Revenue'].mean()

    def revenue_model(x,a,b,c):
        return a*x**2 + b*x + c

    results = []
    for (name, atype), df_item in price_agg.groupby(['Asset Name','Asset Type']):
        df_item = df_item.sort_values('Price')
        min_p, max_p = df_item['Price'].min(), df_item['Price'].max()
        num_points = len(df_item)

        if num_points < 3:
            optimal_price = None
            message = "–ú–∞–ª–æ —Ç–µ—Å—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã"
        else:
            try:
                x = df_item['Price'].values
                y = df_item['Revenue'].values
                params,_ = curve_fit(revenue_model, x, y, maxfev=5000)
                a,b,c = params
                vertex = -b/(2*a) if a!=0 else None
                if vertex is not None and a<0:
                    optimal_price = float(np.clip(vertex, min_p, max_p))
                    message = ""
                else:
                    optimal_price = None
                    message = f"–ü–∞—Ä–∞–±–æ–ª–∞ –≤–≤–µ—Ä—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –≤—ã—à–µ {max_p:.2f}"
            except:
                optimal_price = None
                message = "–û—à–∏–±–∫–∞ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ"

        max_rev = float(df_item['Revenue'].max())
        results.append({
            "Accessory": name,
            "Type": atype,
            "Optimal Price": optimal_price,
            "Predicted Max Revenue": max_rev,
            "Min Tested Price": min_p,
            "Max Tested Price": max_p,
            "Data Points": num_points,
            "Message": message
        })

    result_df = pd.DataFrame(results).sort_values(['Type','Accessory'])
    st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤")
    st.dataframe(result_df, use_container_width=True)

    # –í—ã–±–æ—Ä –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    st.subheader("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:")
    filtered = result_df.copy()
    if search.strip():
        filtered = filtered[filtered["Accessory"].str.contains(search.strip(),case=False,na=False)]
    options = filtered.apply(lambda row: f"{row['Type']}: {row['Accessory']}",axis=1).tolist()
    selected = st.selectbox("–ê–∫—Å–µ—Å—Å—É–∞—Ä:", options)

    if selected:
        sel_type, sel_name = selected.split(": ")
        df_plot = price_agg[(price_agg['Asset Name']==sel_name)&(price_agg['Asset Type']==sel_type)].sort_values("Price")

        # Price ‚Üí Revenue (—Å—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–≤–Ω–æ–µ)
        fig1,ax1 = plt.subplots(figsize=(8,4))
        ax1.scatter(df_plot['Price'], df_plot['Revenue'], label="–î–∞–Ω–Ω—ã–µ")
        if len(df_plot)>=3:
            try:
                params,_ = curve_fit(revenue_model, df_plot['Price'], df_plot['Revenue'], maxfev=5000)
                x_dense = np.linspace(df_plot['Price'].min(), df_plot['Price'].max(),200)
                y_dense = revenue_model(x_dense,*params)
                ax1.plot(x_dense,y_dense,color='red',label='–ü–∞—Ä–∞–±–æ–ª–∞')
                vertex = -params[1]/(2*params[0])
                if params[0]<0:
                    ax1.axvline(vertex,color='green',linestyle='--',label=f'–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {vertex:.2f}')
            except:
                pass
        ax1.set_xlabel("–¶–µ–Ω–∞")
        ax1.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–≤–Ω–æ–µ Revenue")
        ax1.legend()
        st.pyplot(fig1)

        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ Revenue –ø–æ –¥–∞—Ç–µ
        df_time = daily_price[(daily_price['Asset Name']==sel_name)&(daily_price['Asset Type']==sel_type)].sort_values('Date')
        fig2,ax2 = plt.subplots(figsize=(8,4))
        ax2.plot(df_time['Date'], df_time['Revenue'], linestyle='--', color='blue', label='Revenue')
        df_time['MA7'] = df_time['Revenue'].rolling(7,min_periods=1).mean()
        ax2.plot(df_time['Date'], df_time['MA7'], color='red', label='–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (7 –¥–Ω–µ–π)')
        ax2.set_xlabel("–î–∞—Ç–∞")
        ax2.set_ylabel("–°—É–º–º–∞—Ä–Ω–æ–µ Revenue –∑–∞ –¥–µ–Ω—å")
        ax2.set_title("–î–∏–Ω–∞–º–∏–∫–∞ Revenue –ø–æ –¥–∞—Ç–µ")
        ax2.legend()
        st.pyplot(fig2)
